const{Command:Command}=require("commands"),permissions=require("permissions"),config=require("config"),fs=require("fs");exports.ops=((s,e,o)=>{var i=[];permissions.runAllUsers((s,e)=>{e.isOp&&i.push(s)}),e.sendMessage([function(){for(var s=[],e=0;e<i.length;e++)s.push({text:`${i[e]}\n`,color:config.coloredOps.enabled?config.coloredOps.color:"white"});return s}()])}),exports.op=((s,e,o)=>{const i=s[0];if(permissions.isOp(i))e.sendMessage({text:`${i} is already opped!`});else{const s=JSON.parse(fs.readFileSync("lib/permissions.json","utf-8"));s.users[i]?s.users[i].isOp=!0:s.users[i]={isOp:!0,permissions:[],groups:[]},fs.writeFileSync("lib/permissions.json",JSON.stringify(s,null,2)),e.sendMessage({text:`Opped ${i}`})}}),exports.deop=((s,e,o)=>{const i=s[0];if(permissions.isOp(i)){const s=JSON.parse(fs.readFileSync("lib/permissions.json","utf-8"));s.users[i]?s.users[i].isOp=!1:s.users[i]={isOp:!1,permissions:[],groups:[]},fs.writeFileSync("lib/permissions.json",JSON.stringify(s,null,2)),e.sendMessage({text:`Deopped ${i}`})}else e.sendMessage({text:`${i} is not opped!`})}),exports.init=(()=>{new Command({command:"ops",filename:"ops.mcjsp",info:"Lists the current operators",usage:"/ops"}),new Command({command:"op",filename:"ops.mcjsp",info:"Gives the specified player operator",usage:"/op <player>"}),new Command({command:"deop",filename:"ops.mcjsp",info:"Remove the specified player's operator",usage:"/deop <player>"})});